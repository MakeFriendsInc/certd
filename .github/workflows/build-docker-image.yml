name: build and push image to aliyun
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install
    - name: client build
      run: |
        cd ${{ github.workspace }}/packages/ui/certd-client
        pnpm run build
    - name: server build
      run: |
        cd ${{ github.workspace }}/packages/ui/certd-server
        pnpm run build
    - name: move to app folder
      run: |
        cp -rpf ${{ github.workspace }}/packages/ui/certd-server ${{ github.workspace }}/app
        mkdir -p ${{ github.workspace }}/app/public
        cp -rpf ${{ github.workspace }}/packages/ui/certd-client/dist/* ${{ github.workspace }}/app/public
        tar -czf certd.tgz app
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: certd
        path: '${{ github.workspace }}/certd.tgz'
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: certd
      - name: Deploy to Earth 001
        id: deploy-to-moon-001
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          # ssh remote host
          host: ${{ secrets.EARTH_001_ALIYUN_HOST }}
          # ssh remote port
          port: ${{ secrets.EARTH_001_ALIYUN_PORT }}
          # ssh remote user
          user: ${{ secrets.EARTH_ALIYUN_HOST_DEPLOY_USER }}
          # content of ssh private key. ex raw content of ~/.ssh/id_rsa
          key: ${{ secrets.EARTH_ALIYUN_HOST_DEPLOY_USER_KEY }}
          # connection timeout to remote host
          connect_timeout: 30s
          # execute pre-commands before scp
          first_ssh: |
            echo "${{ github.sha }}" > /home/deploy/certd/github.sha
            rm -rf /home/deploy/certd/app
            mkdir -p /home/deploy/certd/app
          # scp from local to remote
          scp: |
            * => /home/deploy/certd/
          # execute post-commands after scp
          last_ssh: |
            cd /home/deploy/certd
            tar -xzf certd.tgz
            sudo docker compose build


